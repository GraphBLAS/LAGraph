--------------------------------------------------------------------------------
Feb 20. Results on plat8153, using gcc 7.4 with v3.2.0: SET 1
--------------------------------------------------------------------------------

max 32 threads, first set of results ('black box'): my1_*_plat scripts:

        #PBS -l nodes=1:ppn=2:plat8153
        #PBS -l walltime=24:00:00
        cd $PBS_O_WORKDIR
        export OMP_NUM_THREADS=32
        export KMP_AFFINITY="verbose,explicit,proclist=[0-31]"
        export GOMP_CPU_AFFINITY="0-31"
        numactl --interleave=all ./do_gap

default method marked =, for 32 threads (same across the row)
best result marked (*), as compared to SET 2 below.

                kron        urand       twitter      web        road
                -----       -----       -------     ----        ----

n148:
BC GrB(v4)#32   37.09 =      48.33 =    15.78 =     8.19 =      62.28 = 
BC GrB(v4)#16   73.89        82.73      25.84      11.53        56.78
BC GrB(v4)#8   139.24       147.89      53.99      19.96        54.18 *

n149:
BC GrB(v4)#32   36.308      (job terminated; results not needed)
BC GrB(v4)#16   72.644
BC GrB(v4)#8   136.063
BC GrB(v4)#4   398.698
BC GrB(v4)#2   711.457
BC GrB(v4)#1  1258.620

n150:
BFS GrB (#32)    3.125 =     2.183 =     1.157 =    1.072 =     7.557 = 
BFS GrB (#16)    5.193       3.477       1.740      1.410       7.515
BFS GrB (# 8)    9.410       6.077       2.966      2.052       7.530
BFS GrB (# 4)   18.228      11.535       5.528      3.364       7.577
BFS GrB (# 2)   35.437      21.960      10.476      5.881       7.680
BFS GrB (# 1)   69.960      43.963      19.815     10.638       7.897

n149: do not report method sv5, just sv5b
CC (sv5) #32    17.293      14.383      7.755       2.095       1.472
CC (sv5) #16    29.988      23.693     13.656       2.906       1.729
CC (sv5) #8     54.385      41.834     24.880       4.436       2.268
CC (sv5) #4    105.110      78.758     47.752       7.741       3.533
--
CC (sv5b)#32     3.433 =     4.548 =    1.486 =     1.730 =     0.807 =
CC (sv5b)#16     5.394       6.906      2.248       2.344       1.312
CC (sv5b)#8      9.072      12.071      3.651       3.399       2.253
CC (sv5b)#4     17.279      23.417      6.745       5.923       4.368

n147: 3f is pure GraphBLAS, x4 uses import/export.  Report just 3f.
      x4 is faster but uses openmp loops outside of GraphBLAS, so
      save it for SET 2.
PR:3f #32       16.541 =    18.860 =    12.891 =    6.345 =     0.919 =     gcc
PR:3f #16       28.377      31.304      23.037     10.229       1.431       gcc
--
PR:x4 #32       16.363      18.676      12.716      6.158       0.813       gcc
PR:x4 #16       27.991      30.993      22.817      9.898       1.257       gcc

n147: TODO run road graph with fewer threads (SET 2)
SSSP12  #32     16.686      18.649 *     7.782      11.955 *   77.342
SSSP12  #16     25.049      28.161      10.928      12.282     62.784
--
SSSP12c #32     16.315 =    18.954 =     7.634 =    11.981 =   77.365 =
SSSP12c #16     24.390      28.734      10.759      12.480     62.739 *

n149: report dot2 only
TC (dot) #32   1309.06      48.00       318.84      48.50       0.309
TC (dot2)#32   1205.67 =    49.83 =     308.54 =    47.80 =     0.321 =

--------------------------------------------------------------------------------
Feb 20. Results on plat8153, using gcc 7.4 with v3.2.0: SET 2
--------------------------------------------------------------------------------

max 64 threads, 2nd 'best effort' results, from my2_*_plat scripts.
with numactl --interleave=all, all other defaults (affinity, # threads):

        #PBS -l nodes=1:ppn=2:plat8153
        #PBS -l walltime=24:00:00
        cd $PBS_O_WORKDIR
        export OMP_NUM_THREADS=64
        numactl --interleave=all ./do_gap

Best result with *.

                kron        urand       twitter      web        road
                -----       -----       -------     ----        ----

n148: (in progress; trying BC on road with fewer threads for SET 2)
BC GrB(v4)#64   29.85       41.48 *     14.17 *     13.38       69.81
BC GrB(v4)#32   37.18       45.50       16.15        8.42 *     61.86
BC GrB(v4)#16   73.88       79.71       26.22       11.13       56.49 *

n150:
BC GrB(v4)#64   29.287 *      .           .           .           .
BC GrB(v4)#32   36.842        .           .           .           .
BC GrB(v4)#16   73.464        .           .           .           .
BC GrB(v4)#8   139.943        .           .           .           .
BC GrB(v4)#4   389.253        .           .           .           .
BC GrB(v4)#2   696.844        .           .           .           .
BC GrB(v4)#1  1253.730        .           .           .           .

n150: note that road is essentially the same, for all thread counts
BFS GrB (#64)   2.817 *      2.068 *     1.103 *    1.586       7.638
BFS GrB (#32)   3.185        2.215       1.184      1.102 *     7.479
BFS GrB (#16)   5.220        3.425       1.761      1.372       7.455 *
BFS GrB (# 8)   9.559        6.171       3.054      2.074       7.457
BFS GrB (# 4)  18.144       11.463       5.560      3.408       7.501
BFS GrB (# 2)  34.423       21.926      10.315      5.988       7.646

n148: only report method sv5b
CC (sv5) #64    15.583      13.453       7.052      2.013       1.455
CC (sv5) #32    17.357      14.446       7.802      2.138       1.534
CC (sv5) #16    29.384      23.530      13.148      2.730       1.727
CC (sv5) #8     55.329      42.125      24.249      4.433       2.353
--
CC (sv5b)#64     3.002 *     3.931 *     1.335 *    1.718 *     0.716 *
CC (sv5b)#32     3.476       4.602       1.474      1.759       0.817
CC (sv5b)#16     5.237       7.213       2.151      2.169       1.245
CC (sv5b)#8      9.437      13.073       3.731      3.376       2.282

n148: 3f is pure GraphBLAS, x4 uses import/export.  Just report 3f?
    3f is slower but more elegant, and nearly as fast.
PR:3f #64       15.508      18.401      11.833      6.091       0.870       gcc
PR:3f #32       16.406      18.764      12.858      6.292       0.916       gcc
--
PR:x4 #64       15.303 *    18.202 *    11.642 *    5.915 *     0.769 *     gcc
PR:x4 #32       16.192      18.547      12.662      6.079       0.812       gcc

SSSP12  #64     16.578      18.983       9.869      26.906      -
SSSP12  #32     16.904      18.870 *     8.012      12.001 *    -
--
SSSP12c #64     16.332 *    19.490      10.163      27.484      -
SSSP12c #32     16.502      19.178       7.901 *    12.278      -

n149:
SSSP12  #16     25.272      27.239      11.245      12.383     65.014
SSSP12  #8      45.601      27.820      19.469      16.306      .
--
SSSP12c #16     24.758      49.201      11.134      12.708     65.216
SSSP12c #8      44.635      50.269      19.292      16.783      .

n147: pick all dot or all dot?  a mix?
TC (dot) #64    837.070     30.222 *    212.248 *   36.653 *    0.355
TC (dot2)#64    829.292 *   31.356      219.430     38.040      0.345 *


--------------------------------------------------------------------------------
Feb 20. Results on plat8153, using gcc 7.4 with v3.2.0: SET 3
--------------------------------------------------------------------------------

all default settings (64 threads on 32 cores, default
affinity, default numactl):

        #PBS -l nodes=1:ppn=2:plat8153
        #PBS -l walltime=24:00:00
        cd $PBS_O_WORKDIR
        ./do_gap

This is slower.  The only difference is the 'numactl --interleave=all' in SET2,
whereas SET3 uses the default numactl.  Clearly, --interleave=all is faster,
regardless of the method and thread count.

                kron        urand       twitter      web        road
                -----       -----       -------     ----        ----
n149:
BC GrB(v4)#64   36.148      51.233      16.366      13.271      88.815
BC GrB(v4)#32   44.334      56.770      18.153       9.006      60.846
BC GrB(v4)#16   81.057      83.692      29.015      11.686      54.854

n149:
BFS GrB (#64)   3.102        2.383       1.254      1.672       7.454
BFS GrB (#32)   3.524        2.568       1.330      1.089       7.282
BFS GrB (#16)   5.689        3.834       1.930      1.371       7.253
BFS GrB (# 8)  10.673        6.653       3.297      2.125       7.266
BFS GrB (# 4)  20.662       12.900       6.285      3.693       7.313
BFS GrB (# 2)  48.449       29.402      15.046      9.311       7.422

n149:
CC (sv5) #64    17.689      15.490       7.838      2.314       1.697
CC (sv5) #32    19.046      16.330       8.515      2.256       1.525
CC (sv5) #16    30.015      23.737      13.266      2.848       1.731
CC (sv5) #8     56.646      43.375      24.932      4.619       2.381
--
CC (sv5b)#64     3.350       4.629       1.487      1.954       0.754
CC (sv5b)#32     3.887       5.260       1.649      1.973       0.847
CC (sv5b)#16     5.471       7.567       2.334      2.274       1.263
CC (sv5b)#8      9.822      14.269       3.993      3.666       2.295

n149:
PR:3f #64       18.223      24.086      12.707      8.562       0.855  def. gcc
PR:3f #32       18.611      24.373      13.004      8.087       0.997  def. gcc
--
PR:x4 #64       15.633      21.176      11.855      8.458       0.783  def. gcc
PR:x4 #32       16.455      21.374      12.806      8.192       0.793  def. gcc

SSSP: terminated (not enough plat8153 nodes up and running)

n147:
TC (dot) #64    841.811     31.400     214.305      38.680      0.463
TC (dot2)#64    828.117     32.544     219.529      39.153      0.366

--------------------------------------------------------------------------------
Feb 23. Results on plat8153, using icc 19.1.0.20191031 with v3.2.0: SET 1
--------------------------------------------------------------------------------

modified GraphBLAS to replace atomic read/writes with plain read/writes,
and use icc.  Repeat set 1 above.  Summary: gcc 7.4 is faster than icc 19.1,
in most cases.  Exceptions noted with (*).

                kron        urand       twitter      web        road
                -----       -----       -------     ----        ----
n147:
BC GrB(v4)#32   41.244       53.321     17.484      8.210       66.945
BC GrB(v4)#16   82.748       95.567     29.062     20.792       62.516
BC GrB(v4)#8   155.540      172.673     59.900     66.945       59.450

n148:
BFS GrB (#32)    3.071 *      2.549      1.152      1.032 *      8.280
BFS GrB (#16)    5.092        4.222      1.736      1.365        8.258

n149:
CC (sv5) #32    17.266       14.269      7.828      2.104        1.425
CC (sv5b)#32     3.612        4.764      1.585      1.864        0.867

n150:
PR:3f #32       16.319 *     18.476 *   12.898      6.011        0.980      icc
PR:x4 #32       16.098       18.257     12.799      5.810        0.876      icc

n149:
SSSP12  #32     17.380       19.405      8.257     11.390       69.049
SSSP12  #16     26.673       30.830     11.954     12.490       69.081
--
SSSP12c #32     17.522       19.833      8.244     11.644       67.328
SSSP12c #16     27.220       31.704     12.029     12.925       67.686

TC (dot) #32  1331.621       45.940 *  307.678 *   53.410        0.300
TC (dot2)#32  1523.083       45.635 *  378.234     60.785        0.312

--------------------------------------------------------------------------------
Feb 23. Results on plat8153, using icc 19.1.0.20191031 with v3.2.0: SET 2
--------------------------------------------------------------------------------

modified GraphBLAS to replace atomic read/writes with plain read/writes,
and use icc.  Repeat set 2 above.  Best result for SET 2 marked as (***).

                kron        urand       twitter      web        road
                -----       -----       -------     ----        ----

n148:
BC GrB(v4)#64   32.223       44.899      16.142      7.992       79.278
BC GrB(v4)#32   42.644       53.867      17.359      8.278       66.297
BC GrB(v4)#16   84.004       90.709      29.440     11.300       61.048

n147:
BFS GrB (#64)    2.767 ***    2.252      1.043 ***  1.010 ***    8.408
BFS GrB (#32)    3.099        2.534      1.147      1.032        8.169

n148:
CC (sv5) #64    15.696       13.389      7.160      2.016        1.466
CC (sv5b)#64     3.104        4.092      1.414      1.884        0.805

n150:
PR:3f #64       15.426       18.257     11.880      5.790        0.956      icc
PR:x4 #64       15.258***    18.083***  11.719      5.643 ***    0.859      icc

n147: (just 32 threads)
SSSP12  #32     17.708       20.007      8.369     11.461       68.756
SSSP12c #32     17.824       20.398      8.379     11.644       68.889

n148:
TC (dot) #64   802.497***    29.849*** 197.667***  39.253        0.292 ***
TC (dot2)#64   957.072       30.149    254.442     44.536        0.301


--------------------------------------------------------------------------------
Feb 21-23. Results on hypersparse, using gcc 5.4.0 with v3.2.0: SET 2
--------------------------------------------------------------------------------

20-core Intel(R) Xeon(R) CPU E5-2698 v4 @ 2.20GHz.
The two PR methods are pure GraphBLAS (3f) and with import/export (x4).
I have two SSSP methods: SSSP12 and SSSP12c.  Both are pure GraphBLAS.
I'm reporting only SSSP12c in the GAP results (SET1).

                kron        urand       twitter      web        road
                -----       -----       -------     ----        ----

BC (v4) #40     40.204      62.053      13.910       7.860      59.387 
BC (v4) #20     50.225      70.054      17.832       8.278      52.923 
BC (v4) #10     97.775     106.288      35.514      12.130      50.748 
BC (v4) # 5    282.450     331.466      80.078      25.226      50.153 
BC (v4) # 2    606.801     806.193     186.238      59.314      50.504 
BC (v4) # 1   1098.001    1378.877     327.145      90.758      51.530 

BFS     #40      3.612       2.818       1.100       1.072       7.170
BFS     #20      4.168       2.966       1.267       1.091       7.135
BFS     #10      6.582       4.611       2.053       1.398       7.164
BFS     # 5     12.336       8.292       3.442       2.147       7.188
BFS     # 2     29.711      19.400       7.739       4.480       7.200
BFS     # 1     57.772      38.110      14.434       8.301       7.374

CC(sv5b)#40     4.0416      4.9057      1.8112       2.3417      1.4738 
CC(sv5b)#20     4.5317      5.4396      1.9528       4.1156      1.1653 
CC(sv5b)#10     6.7458      7.9616      2.6642       2.8914      1.7278 
CC(sv5b)# 5    11.7470     13.9554      4.4392       4.1156      3.0663 

PR(3f) #40     21.788      27.665      17.011        8.852       1.384 
PR(3f) #20     22.630      28.530      17.828        9.007       1.388 
--
PR(x4) #40     22.325      27.340      16.762        8.502       1.153 
PR(x4) #20     21.543      28.255      17.465        8.640       1.180 

SSSP12  #40    20.0351     26.0511      8.7357      10.2109    102.3907
SSSP12  #20    22.3717     28.6685      9.4616       9.5695     56.5101
--
SSSP12c #40    19.2066     26.2706      8.3397      10.3349    103.0293 
SSSP12c #20    21.5930     28.9661      9.0798       9.6989     56.0314 

TC(dot)  #40  953.7096     36.0968    240.3020      41.6584      0.3074
TC(dot2) #40  984.3086     37.7154    258.7417      43.9863      0.3080

